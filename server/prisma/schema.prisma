generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  readerId      Int?      
  email         String    @unique
  passwordHash  String
  role          String    @default("user")
  name          String?
  surname       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  RefreshToken  RefreshToken[]
  Library       Library?
  Reservation   Reservation[]
}

model RefreshToken {
  id           Int      @id @default(autoincrement())
  tokenHash    String   
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  revoked      Boolean  @default(false)

  @@index([userId])
  @@index([tokenHash])
}

model Library {
  id          Int      @id @default(autoincrement())
  name        String
  address     String
  books       Book[]
  librarianId Int      @unique
  librarian   User     @relation(fields: [librarianId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([librarianId])
}

model Book {
  id              Int      @id @default(autoincrement())
  name            String
  author          String
  isbn            String
  type            String   
  theme           String
  publishingYear  Int
  libraryId       Int
  library         Library  @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  Reservation     Reservation[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([libraryId])
  @@index([isbn])
}

model Reservation {
  id                Int       @id @default(autoincrement())
  userId            Int
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookId            Int
  book              Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  
  status            String    @default("pending")
  requestedStartDate DateTime
  requestedEndDate   DateTime
  
  userComment       String?
  librarianComment  String?
  reviewedAt        DateTime?
  returnedAt        DateTime?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([userId])
  @@index([bookId])
  @@index([status])
}
